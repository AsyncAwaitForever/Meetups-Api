# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ${env:SERVERLESS_ORG}
# "service" is the name of this project. This will also be added to your AWS resource names.
service: Meetups-Api

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: eu-north-1
  environment:
    JWT_SECRET: ${env:JWT_SECRET}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    MEETUPS_TABLE: ${self:service}-meetups-${self:provider.stage}
    RATINGS_TABLE: ${self:service}-ratings-${self:provider.stage}
    REGISTRATIONS_TABLE: ${self:service}-registrations-${self:provider.stage}
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEETUPS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RATINGS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATIONS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEETUPS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RATINGS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATIONS_TABLE}/index/*

package:
  individually: true

build:
  esbuild:
    bundle: true
    minify: true

functions:
  LoadInData:
    handler: src/handlers/Meetups/LoadData/index.handler

  signup:
    handler: src/handlers/Users/Signup/index.handler
    events:
      - httpApi:
          path: /signup
          method: post
  login:
    handler: src/handlers/Users/Login/index.handler
    events:
      - httpApi:
          path: /login
          method: post
  userProfile:
    handler: src/handlers/Users/UserProfile/index.handler
    events:
      - httpApi:
          path: /profile
          method: get

  listMeetups:
    handler: src/handlers/Meetups/ListMeetups/index.handler
    events:
      - httpApi:
          path: /meetups
          method: get
  displayMeetup:
    handler: src/handlers/Meetups/DisplayMeetup/index.handler
    events:
      - httpApi:
          path: /meetups/{meetupId}
          method: get
  searchMeetups:
    handler: src/handlers/Meetups/SearchMeetups/index.handler
    events:
      - httpApi:
          path: /meetups/search
          method: get
  filterMeetups:
    handler: src/handlers/Meetups/FilteringMeetups/index.handler
    events:
      - httpApi:
          path: /meetups/filter
          method: get
  registerToMeetup:
    handler: src/handlers/Users/RegisterMeetups/index.handler
    events:
      - httpApi:
          path: /meetups/{meetupId}/register
          method: post
  unregisterMeetup:
    handler: src/handlers/Users/UnregisterMeetups/index.handler
    events:
      - httpApi:
          path: /meetups/{meetupId}/unregister
          method: delete
  addRating:
    handler: src/handlers/Users/AddRating/index.handler
    events:
      - httpApi:
          path: /meetups/{meetupId}/ratings
          method: post
  meetupRatings:
    handler: src/handlers/Meetups/MeetupRatings/index.handler
    events:
      - httpApi:
          path: /meetups/{meetupId}/ratings
          method: get

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    MeetupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MEETUPS_TABLE}
        AttributeDefinitions:
          - AttributeName: meetupId
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: location
            AttributeType: S
          - AttributeName: time
            AttributeType: S
          # category must be included, it's in user story
          - AttributeName: category
            AttributeType: S
        KeySchema:
          - AttributeName: meetupId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: titleIndex
            KeySchema:
              - AttributeName: title
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: locationIndex
            KeySchema:
              - AttributeName: location
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: timeIndex
            KeySchema:
              - AttributeName: time
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: categoryIndex
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    RegistrationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REGISTRATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: meetupId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: meetupId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: userRegistrations
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    RatingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RATINGS_TABLE}
        AttributeDefinitions:
          - AttributeName: ratingId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: meetupId
            AttributeType: S
          - AttributeName: stars
            AttributeType: N
        KeySchema:
          - AttributeName: ratingId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userMeetupIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: meetupId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: starsIndex
            KeySchema:
              - AttributeName: stars
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: meetupIndex
            KeySchema:
              - AttributeName: meetupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
