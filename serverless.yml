# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ${env:SERVERLESS_ORG}
# "service" is the name of this project. This will also be added to your AWS resource names.
service: Meetups-Api

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: eu-north-1
  environment:
    JWT_SECRET: ${env:JWT_SECRET}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    MEETUPS_TABLE: ${self:service}-meetups-${self:provider.stage}
    RATINGS_TABLE: ${self:service}-ratings-${self:provider.stage} 
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEETUPS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEETUPS_TABLE}/index/*

package:
  individually: true

build:
  esbuild:
    bundle: true
    minify: true

  functions:
   signup:
     handler: handlers/Users/Signup/index.handler
     events:
       - httpApi:
           path: /signup
           method: post
   login:
     handler: handlers/Users/Login/index.handler
     events:
       - httpApi:
           path: /login
           method: post

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    MeetupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MEETUPS_TABLE}
        AttributeDefinitions:
          - AttributeName: meetupId
            AttributeType: S
          - AttributeName: searchString  
            AttributeType: S
        KeySchema:
          - AttributeName: meetupId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: SearchIndex
            KeySchema:
              - AttributeName: searchString
                KeyType: HASH  
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    RatingsTable:                      
      Type: AWS::DynamoDB::Table      
      Properties:                       
        TableName: ${self:provider.environment.RATINGS_TABLE}
        AttributeDefinitions:
          - AttributeName: ratingId  
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: meetupId
            AttributeType: S
          - AttributeName: stars
            AttributeType: N 
        KeySchema:
          - AttributeName: ratingId 
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserMeetupIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: meetupId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: StarsIndex
            KeySchema:
              - AttributeName: stars
                KeyType: HASH 
            Projection:
              ProjectionType: ALL

